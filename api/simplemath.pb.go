// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simplemath.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// this is the request data for GreatCommonDivisor
type GCDRequest struct {
	First                int32    `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Second               int32    `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GCDRequest) Reset()         { *m = GCDRequest{} }
func (m *GCDRequest) String() string { return proto.CompactTextString(m) }
func (*GCDRequest) ProtoMessage()    {}
func (*GCDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e577c6f8a1944023, []int{0}
}

func (m *GCDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCDRequest.Unmarshal(m, b)
}
func (m *GCDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCDRequest.Marshal(b, m, deterministic)
}
func (m *GCDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCDRequest.Merge(m, src)
}
func (m *GCDRequest) XXX_Size() int {
	return xxx_messageInfo_GCDRequest.Size(m)
}
func (m *GCDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GCDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GCDRequest proto.InternalMessageInfo

func (m *GCDRequest) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *GCDRequest) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

// this is the response data for GreatCommonDivisor
type GCDResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GCDResponse) Reset()         { *m = GCDResponse{} }
func (m *GCDResponse) String() string { return proto.CompactTextString(m) }
func (*GCDResponse) ProtoMessage()    {}
func (*GCDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e577c6f8a1944023, []int{1}
}

func (m *GCDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCDResponse.Unmarshal(m, b)
}
func (m *GCDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCDResponse.Marshal(b, m, deterministic)
}
func (m *GCDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCDResponse.Merge(m, src)
}
func (m *GCDResponse) XXX_Size() int {
	return xxx_messageInfo_GCDResponse.Size(m)
}
func (m *GCDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GCDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GCDResponse proto.InternalMessageInfo

func (m *GCDResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*GCDRequest)(nil), "api.GCDRequest")
	proto.RegisterType((*GCDResponse)(nil), "api.GCDResponse")
}

func init() { proto.RegisterFile("simplemath.proto", fileDescriptor_e577c6f8a1944023) }

var fileDescriptor_e577c6f8a1944023 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0x31, 0x0b, 0xc2, 0x30,
	0x10, 0x85, 0xad, 0xd2, 0x0e, 0xe7, 0x60, 0x09, 0x22, 0xc5, 0x49, 0x0a, 0x82, 0x53, 0x07, 0x9d,
	0x74, 0x6d, 0xa1, 0x93, 0x4b, 0xfd, 0x05, 0x51, 0x4f, 0x1a, 0x68, 0x72, 0x31, 0x97, 0xfa, 0xfb,
	0xc5, 0xb4, 0xd2, 0xf1, 0x7b, 0xdc, 0xbb, 0xf7, 0x41, 0xca, 0x4a, 0xdb, 0x0e, 0xb5, 0xf4, 0x6d,
	0x61, 0x1d, 0x79, 0x12, 0x0b, 0x69, 0x55, 0x7e, 0x01, 0xa8, 0xcb, 0xaa, 0xc1, 0x77, 0x8f, 0xec,
	0xc5, 0x1a, 0xe2, 0x97, 0x72, 0xec, 0xb3, 0x68, 0x17, 0x1d, 0xe2, 0x66, 0x00, 0xb1, 0x81, 0x84,
	0xf1, 0x41, 0xe6, 0x99, 0xcd, 0x43, 0x3c, 0x52, 0xbe, 0x87, 0x65, 0xe8, 0xb2, 0x25, 0xc3, 0xf8,
	0x3b, 0x73, 0xc8, 0x7d, 0xf7, 0x6f, 0x8f, 0x74, 0xac, 0x01, 0x6e, 0x61, 0xfb, 0x2a, 0x7d, 0x2b,
	0xce, 0x20, 0x6a, 0x87, 0xd2, 0x97, 0xa4, 0x35, 0x99, 0x4a, 0x7d, 0x14, 0x93, 0x13, 0xab, 0x42,
	0x5a, 0x55, 0x4c, 0x26, 0xdb, 0x74, 0x0a, 0x86, 0xf7, 0xf9, 0xec, 0x9e, 0x04, 0xef, 0xd3, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0x54, 0x50, 0x4f, 0xcb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleMathClient is the client API for SimpleMath service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleMathClient interface {
	// this is the interface for greatest common divisor
	GreatCommonDivisor(ctx context.Context, in *GCDRequest, opts ...grpc.CallOption) (*GCDResponse, error)
}

type simpleMathClient struct {
	cc *grpc.ClientConn
}

func NewSimpleMathClient(cc *grpc.ClientConn) SimpleMathClient {
	return &simpleMathClient{cc}
}

func (c *simpleMathClient) GreatCommonDivisor(ctx context.Context, in *GCDRequest, opts ...grpc.CallOption) (*GCDResponse, error) {
	out := new(GCDResponse)
	err := c.cc.Invoke(ctx, "/api.SimpleMath/GreatCommonDivisor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleMathServer is the server API for SimpleMath service.
type SimpleMathServer interface {
	// this is the interface for greatest common divisor
	GreatCommonDivisor(context.Context, *GCDRequest) (*GCDResponse, error)
}

// UnimplementedSimpleMathServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleMathServer struct {
}

func (*UnimplementedSimpleMathServer) GreatCommonDivisor(ctx context.Context, req *GCDRequest) (*GCDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreatCommonDivisor not implemented")
}

func RegisterSimpleMathServer(s *grpc.Server, srv SimpleMathServer) {
	s.RegisterService(&_SimpleMath_serviceDesc, srv)
}

func _SimpleMath_GreatCommonDivisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServer).GreatCommonDivisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SimpleMath/GreatCommonDivisor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServer).GreatCommonDivisor(ctx, req.(*GCDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleMath_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SimpleMath",
	HandlerType: (*SimpleMathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreatCommonDivisor",
			Handler:    _SimpleMath_GreatCommonDivisor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simplemath.proto",
}
